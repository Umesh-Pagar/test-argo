{{- if and (.Values.externalSecrets) (.Values.externalSecrets.enable) -}}
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: external-secrets-apps-{{ .Values.env }}
  namespace: {{ .Values.namespace }}
  finalizers:
  - resources-finalizer.argocd.argoproj.io
spec:
  goTemplate: true
  goTemplateOptions: ["missingkey=error"]
  generators:
  - list:
      elements:
      {{- range .Values.clusters }}
      - cluster: {{ .name }}
        url: {{ .url }}
      {{- end }} 
  template:
    metadata:
      name: '{{`{{.cluster}}`}}-external-secrets'
    spec:
      project: default
      source:
        repoURL: {{ .Values.repoUrl }}
        path: cluster-addons/add-ons/external-secrets
        targetRevision: {{ .Values.targetRevision }}
        helm:
          values: |
            external-secrets:
            {{- toYaml .Values.externalSecrets | nindent 14 }}
      destination:
        server: '{{`{{.url}}`}}'
        namespace: {{ .Values.externalSecrets.namespace }}
      syncPolicy:
        automated:
          prune: true
        syncOptions:
        - CreateNamespace=true
        retry:
          limit: 1
          backoff:
            duration: 5s
            factor: 2
            maxDuration: 1m
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    eks.amazonaws.com/role-arn: {{ .Values.externalSecrets.roleArn }}
  name: {{ .Values.externalSecrets.serviceAccountName }}
  namespace: {{ .Values.externalSecrets.serviceAccountNamespace }}

---
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: azure-secret-store
spec:
  provider:
    aws:
      service: SecretsManager
      region: {{ .Values.externalSecrets.region }}
      auth:
        jwt:
          serviceAccountRef:
            name: {{ .Values.externalSecrets.serviceAccountName }}
            namespace: {{ .Values.externalSecrets.serviceAccountNamespace }}
  conditions:
    # Options are namespaceSelector, namespaces or namespacesRegex
    - namespaceSelector:
        matchLabels: {} #deploy to every namespace

---
apiVersion: external-secrets.io/v1beta1
kind: ClusterExternalSecret
metadata:
  name: azure-exteral-secret
spec:
  externalSecretName: azure-secret-to-be-created
  refreshTime: 3m
  namespaceSelectors:
  - matchLabels: {} #deploy to every namespace
  externalSecretSpec:
    refreshInterval: 3m
    secretStoreRef:
      kind: SecretStore # References the SecretStore resource that defines how to connect to Azure Key Vault.
      name: azure-secret-store # The name of the SecretStore that will be used (must match the name defined in the SecretStore manifest).
    target:
      name: azure-secret-to-be-created # The name of the Kubernetes secret that will be created or updated with the external secret data.
      creationPolicy: 'Merge' # Defines the creation policy; "Owner" means that the ExternalSecret controls the lifecycle of the Kubernetes secret.
    data:
    {{- range .Values.externalSecrets.secrets }}
    - secretKey: {{ .name }} # The key under which the secret will be stored in the Kubernetes secret.
      remoteRef:
        key: {{ .name }} # The key name in Azure Key Vault from which the secret value will be retrieved.
    {{- end }}           # The key name in Azure Key Vault from which the secret value will be retrieved.

{{- end -}}